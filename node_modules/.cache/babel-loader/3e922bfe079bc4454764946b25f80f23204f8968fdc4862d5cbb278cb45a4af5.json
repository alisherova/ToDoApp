{"ast":null,"code":"var _jsxFileName = \"/home/itproger/Desktop/toDo_redux/to_do_app/src/components/SingleTodo/SingleTodo.jsx\";\nimport React, { useRef } from \"react\";\nimport { IoCheckmarkDoneSharp, IoClose } from \"react-icons/io5\";\nimport { addTodos, completeTodos, removeTodos } from \"../../redux/reducer\";\nimport { connect } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapStateToProps = state => {\n  return {\n    todos: state\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodo: obj => dispatch(addTodos(obj)),\n    removeTodo: id => dispatch(removeTodos(id)),\n    completeTodo: id => dispatch(completeTodos(id))\n  };\n};\nconst SingleTodo = props => {\n  const {\n    removeTodo,\n    completeTodo\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"w-1/3 mt-10 bg-cyan-600 py-6 rounded\",\n    children: props.todos.length > 0 ? props.todos.map(todo => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \" text-slate-200 border-b border-cyan-700 px-8 py-3 flex justify-between items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"checkbox\",\n            type: \"checkbox\",\n            style: {\n              accentColor: \"#1E6091\"\n            },\n            className: \"w-6 h-4 mr-4 checked:\",\n            onChange: () => {\n              completeTodo(todo.id);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"\",\n            htmlFor: \"checkbox\",\n            children: todo.todo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            color: \"red\"\n          },\n          onClick: () => removeTodo(todo.id),\n          children: /*#__PURE__*/_jsxDEV(IoClose, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 29\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-white text-3xl\",\n      children: \"\\uD83E\\uDD73 You made it, Bravo!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n_c = SingleTodo;\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleTodo);\nvar _c;\n$RefreshReg$(_c, \"SingleTodo\");","map":{"version":3,"names":["React","useRef","IoCheckmarkDoneSharp","IoClose","addTodos","completeTodos","removeTodos","connect","jsxDEV","_jsxDEV","mapStateToProps","state","todos","mapDispatchToProps","dispatch","addTodo","obj","removeTodo","id","completeTodo","SingleTodo","props","className","children","length","map","todo","type","style","accentColor","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","color","onClick","_c","$RefreshReg$"],"sources":["/home/itproger/Desktop/toDo_redux/to_do_app/src/components/SingleTodo/SingleTodo.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\nimport { IoCheckmarkDoneSharp, IoClose } from \"react-icons/io5\";\nimport { addTodos, completeTodos, removeTodos } from \"../../redux/reducer\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n    return {\n        todos: state,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addTodo: (obj) => dispatch(addTodos(obj)),\n        removeTodo: (id) => dispatch(removeTodos(id)),\n        completeTodo: (id) => dispatch(completeTodos(id)),\n    };\n};\n\nconst SingleTodo = (props) => {\n\n    const { removeTodo, completeTodo } = props;\n\n    return (\n        <ul className=\"w-1/3 mt-10 bg-cyan-600 py-6 rounded\">\n            {props.todos.length > 0 ?\n                props.todos.map((todo) => {\n                    return (<li\n                        key={todo.id}\n                        className=\" text-slate-200 border-b border-cyan-700 px-8 py-3 flex justify-between items-center\"\n                    >\n                        <div>\n                            <input\n                                id=\"checkbox\"\n                                type=\"checkbox\"\n                                style={{ accentColor: \"#1E6091\" }}\n                                className=\"w-6 h-4 mr-4 checked:\"\n                                onChange={() => {\n                                    completeTodo(todo.id)\n                                }}\n                            />\n                            <label className=\"\" htmlFor=\"checkbox\">{todo.todo}</label>\n\n                            {/* {todo.completed\n                                ? <del className=\"completed\">{todo.todo}</del>\n                                :\n                                <label className=\"\" htmlFor=\"checkbox\">{todo.todo}</label>\n                            } */}\n                        </div>\n                        <button\n                            style={{ color: \"red\" }}\n                            onClick={() => removeTodo(todo.id)} >\n                            <IoClose />\n                        </button>\n                    </li>)\n                })\n                : <p className=\"text-center text-white text-3xl\">ðŸ¥³ You made it, Bravo!</p>}\n        </ul>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleTodo);"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,oBAAoB,EAAEC,OAAO,QAAQ,iBAAiB;AAC/D,SAASC,QAAQ,EAAEC,aAAa,EAAEC,WAAW,QAAQ,qBAAqB;AAC1E,SAASC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,GAAIC,KAAK,IAAK;EAC/B,OAAO;IACHC,KAAK,EAAED;EACX,CAAC;AACL,CAAC;AAED,MAAME,kBAAkB,GAAIC,QAAQ,IAAK;EACrC,OAAO;IACHC,OAAO,EAAGC,GAAG,IAAKF,QAAQ,CAACV,QAAQ,CAACY,GAAG,CAAC,CAAC;IACzCC,UAAU,EAAGC,EAAE,IAAKJ,QAAQ,CAACR,WAAW,CAACY,EAAE,CAAC,CAAC;IAC7CC,YAAY,EAAGD,EAAE,IAAKJ,QAAQ,CAACT,aAAa,CAACa,EAAE,CAAC;EACpD,CAAC;AACL,CAAC;AAED,MAAME,UAAU,GAAIC,KAAK,IAAK;EAE1B,MAAM;IAAEJ,UAAU;IAAEE;EAAa,CAAC,GAAGE,KAAK;EAE1C,oBACIZ,OAAA;IAAIa,SAAS,EAAC,sCAAsC;IAAAC,QAAA,EAC/CF,KAAK,CAACT,KAAK,CAACY,MAAM,GAAG,CAAC,GACnBH,KAAK,CAACT,KAAK,CAACa,GAAG,CAAEC,IAAI,IAAK;MACtB,oBAAQjB,OAAA;QAEJa,SAAS,EAAC,sFAAsF;QAAAC,QAAA,gBAEhGd,OAAA;UAAAc,QAAA,gBACId,OAAA;YACIS,EAAE,EAAC,UAAU;YACbS,IAAI,EAAC,UAAU;YACfC,KAAK,EAAE;cAAEC,WAAW,EAAE;YAAU,CAAE;YAClCP,SAAS,EAAC,uBAAuB;YACjCQ,QAAQ,EAAEA,CAAA,KAAM;cACZX,YAAY,CAACO,IAAI,CAACR,EAAE,CAAC;YACzB;UAAE;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACFzB,OAAA;YAAOa,SAAS,EAAC,EAAE;YAACa,OAAO,EAAC,UAAU;YAAAZ,QAAA,EAAEG,IAAI,CAACA;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOzD,CAAC,eACNzB,OAAA;UACImB,KAAK,EAAE;YAAEQ,KAAK,EAAE;UAAM,CAAE;UACxBC,OAAO,EAAEA,CAAA,KAAMpB,UAAU,CAACS,IAAI,CAACR,EAAE,CAAE;UAAAK,QAAA,eACnCd,OAAA,CAACN,OAAO;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACP,CAAC;MAAA,GAzBJR,IAAI,CAACR,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA0BZ,CAAC;IACT,CAAC,CAAC,gBACAzB,OAAA;MAAGa,SAAS,EAAC,iCAAiC;MAAAC,QAAA,EAAC;IAAsB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/E,CAAC;AAEb,CAAC;AAACI,EAAA,GAxCIlB,UAAU;AA0ChB,eAAeb,OAAO,CAACG,eAAe,EAAEG,kBAAkB,CAAC,CAACO,UAAU,CAAC;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}